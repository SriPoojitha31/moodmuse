{
  "version": 3,
  "sources": ["../../@chakra-ui/react-context/src/index.ts", "../../@chakra-ui/stat/src/stat.tsx", "../../@chakra-ui/stat/src/stat-arrow.tsx", "../../@chakra-ui/stat/src/stat-group.tsx", "../../@chakra-ui/stat/src/stat-help-text.tsx", "../../@chakra-ui/stat/src/stat-label.tsx", "../../@chakra-ui/stat/src/stat-number.tsx"],
  "sourcesContent": ["import {\n  createContext as createReactContext,\n  useContext as useReactContext,\n} from \"react\"\n\nexport interface CreateContextOptions<T> {\n  strict?: boolean\n  hookName?: string\n  providerName?: string\n  errorMessage?: string\n  name?: string\n  defaultValue?: T\n}\n\nexport type CreateContextReturn<T> = [\n  React.Provider<T>,\n  () => T,\n  React.Context<T>,\n]\n\nfunction getErrorMessage(hook: string, provider: string) {\n  return `${hook} returned \\`undefined\\`. Seems you forgot to wrap component within ${provider}`\n}\n\nexport function createContext<T>(options: CreateContextOptions<T> = {}) {\n  const {\n    name,\n    strict = true,\n    hookName = \"useContext\",\n    providerName = \"Provider\",\n    errorMessage,\n    defaultValue,\n  } = options\n\n  const Context = createReactContext<T | undefined>(defaultValue)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = useReactContext(Context)\n\n    if (!context && strict) {\n      const error = new Error(\n        errorMessage ?? getErrorMessage(hookName, providerName),\n      )\n      error.name = \"ContextError\"\n      Error.captureStackTrace?.(error, useContext)\n      throw error\n    }\n\n    return context\n  }\n\n  return [Context.Provider, useContext, Context] as CreateContextReturn<T>\n}\n", "import { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nconst [StatStylesProvider, useStatStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `StatStylesContext`,\n  errorMessage: `useStatStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Stat />\" `,\n})\n\nexport { useStatStyles }\n\nexport interface StatProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Stat\"> {}\n\n/**\n * The `Stat` component is used to display some statistics.\n *\n * @see Docs https://chakra-ui.com/docs/components/stat\n */\nexport const Stat = forwardRef<StatProps, \"div\">(function Stat(props, ref) {\n  const styles = useMultiStyleConfig(\"Stat\", props)\n  const statStyles: SystemStyleObject = {\n    position: \"relative\",\n    flex: \"1 1 0%\",\n    ...styles.container,\n  }\n\n  const { className, children, ...rest } = omitThemingProps(props)\n\n  return (\n    <StatStylesProvider value={styles}>\n      <chakra.div\n        ref={ref}\n        {...rest}\n        className={cx(\"chakra-stat\", className)}\n        __css={statStyles}\n      >\n        <dl>{children}</dl>\n      </chakra.div>\n    </StatStylesProvider>\n  )\n})\n\nStat.displayName = \"Stat\"\n", "import { type IconProps, Icon } from \"@chakra-ui/icon\"\nimport { chakra } from \"@chakra-ui/system\"\n\nimport { useStatStyles } from \"./stat\"\n\nexport const StatDownArrow: React.FC<IconProps> = (props) => (\n  <Icon color=\"red.400\" {...props}>\n    <path\n      fill=\"currentColor\"\n      d=\"M21,5H3C2.621,5,2.275,5.214,2.105,5.553C1.937,5.892,1.973,6.297,2.2,6.6l9,12 c0.188,0.252,0.485,0.4,0.8,0.4s0.611-0.148,0.8-0.4l9-12c0.228-0.303,0.264-0.708,0.095-1.047C21.725,5.214,21.379,5,21,5z\"\n    />\n  </Icon>\n)\n\nStatDownArrow.displayName = \"StatDownArrow\"\n\nexport function StatUpArrow(props: IconProps) {\n  return (\n    <Icon color=\"green.400\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M12.8,5.4c-0.377-0.504-1.223-0.504-1.6,0l-9,12c-0.228,0.303-0.264,0.708-0.095,1.047 C2.275,18.786,2.621,19,3,19h18c0.379,0,0.725-0.214,0.895-0.553c0.169-0.339,0.133-0.744-0.095-1.047L12.8,5.4z\"\n      />\n    </Icon>\n  )\n}\n\nStatUpArrow.displayName = \"StatUpArrow\"\n\nexport interface StatArrowProps extends IconProps {\n  type?: \"increase\" | \"decrease\"\n}\n\nexport function StatArrow(props: StatArrowProps) {\n  const { type, \"aria-label\": ariaLabel, ...rest } = props\n  const styles = useStatStyles()\n\n  const BaseIcon = type === \"increase\" ? StatUpArrow : StatDownArrow\n  const defaultAriaLabel = type === \"increase\" ? \"increased by\" : \"decreased by\"\n  const label = ariaLabel || defaultAriaLabel\n\n  return (\n    <>\n      <chakra.span srOnly>{label}</chakra.span>\n      <BaseIcon aria-hidden {...rest} __css={styles.icon} />\n    </>\n  )\n}\n\nStatArrow.displayName = \"StatArrow\"\n", "import { cx } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra, forwardRef } from \"@chakra-ui/system\"\n\nexport interface StatGroupProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StatGroup = forwardRef<StatGroupProps, \"div\">(function StatGroup(\n  props,\n  ref,\n) {\n  return (\n    <chakra.div\n      {...props}\n      ref={ref}\n      role=\"group\"\n      className={cx(\"chakra-stat__group\", props.className)}\n      __css={{\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"space-around\",\n        alignItems: \"flex-start\",\n      }}\n    />\n  )\n})\n\nStatGroup.displayName = \"StatGroup\"\n", "import { cx } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra, forwardRef } from \"@chakra-ui/system\"\nimport { useStatStyles } from \"./stat\"\n\nexport interface StatHelpTextProps extends HTMLChakraProps<\"dd\"> {}\n\nexport const StatHelpText = forwardRef<StatHelpTextProps, \"dd\">(\n  function StatHelpText(props, ref) {\n    const styles = useStatStyles()\n\n    return (\n      <chakra.dd\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-stat__help-text\", props.className)}\n        __css={styles.helpText}\n      />\n    )\n  },\n)\n\nStatHelpText.displayName = \"StatHelpText\"\n", "import { cx } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra, forwardRef } from \"@chakra-ui/system\"\nimport { useStatStyles } from \"./stat\"\n\nexport interface StatLabelProps extends HTMLChakraProps<\"dt\"> {}\n\nexport const StatLabel = forwardRef<StatLabelProps, \"dt\">(function StatLabel(\n  props,\n  ref,\n) {\n  const styles = useStatStyles()\n  return (\n    <chakra.dt\n      ref={ref}\n      {...props}\n      className={cx(\"chakra-stat__label\", props.className)}\n      __css={styles.label}\n    />\n  )\n})\n\nStatLabel.displayName = \"StatLabel\"\n", "import { cx } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra, forwardRef } from \"@chakra-ui/system\"\nimport { useStatStyles } from \"./stat\"\n\nexport interface StatNumberProps extends HTMLChakraProps<\"dd\"> {}\n\nexport const StatNumber = forwardRef<StatNumberProps, \"dd\">(function StatNumber(\n  props,\n  ref,\n) {\n  const styles = useStatStyles()\n  return (\n    <chakra.dd\n      ref={ref}\n      {...props}\n      className={cx(\"chakra-stat__number\", props.className)}\n      __css={{\n        ...styles.number,\n        fontFeatureSettings: \"pnum\",\n        fontVariantNumeric: \"proportional-nums\",\n      }}\n    />\n  )\n})\n\nStatNumber.displayName = \"StatNumber\"\n"],
  "mappings": "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",
  "names": ["createReactContext", "useReactContext", "Stat", "import_jsx_runtime", "import_jsx_runtime", "StatGroup", "import_jsx_runtime", "StatHelpText", "import_jsx_runtime", "StatLabel", "import_jsx_runtime", "StatNumber"]
}
